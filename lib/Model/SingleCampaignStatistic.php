<?php
/**
 * SingleCampaignStatistic
 *
 * PHP version 5
 *
 * @category Class
 * @package  Dcm
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Dolead Campaign Manager API v1.0
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Dcm\Model;

use \ArrayAccess;

/**
 * SingleCampaignStatistic Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Dcm
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SingleCampaignStatistic implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SingleCampaignStatistic';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'click_assisted_conversions' => 'int',
        'click_assisted_revenue' => 'int',
        'clicks' => 'int',
        'conversion_rate_many_per_click' => 'double',
        'conversion_rate_one_per_click' => 'double',
        'conversions_many_per_click' => 'int',
        'conversions_one_per_click' => 'int',
        'cost' => 'double',
        'ctr' => 'double',
        'date' => 'string',
        'hits' => 'int',
        'id' => 'string',
        'margin_rate' => 'double',
        'position' => 'double',
        'revenue' => 'double',
        'roi' => 'double'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'click_assisted_conversions' => 'click_assisted_conversions',
        'click_assisted_revenue' => 'click_assisted_revenue',
        'clicks' => 'clicks',
        'conversion_rate_many_per_click' => 'conversion_rate_many_per_click',
        'conversion_rate_one_per_click' => 'conversion_rate_one_per_click',
        'conversions_many_per_click' => 'conversions_many_per_click',
        'conversions_one_per_click' => 'conversions_one_per_click',
        'cost' => 'cost',
        'ctr' => 'ctr',
        'date' => 'date',
        'hits' => 'hits',
        'id' => 'id',
        'margin_rate' => 'margin_rate',
        'position' => 'position',
        'revenue' => 'revenue',
        'roi' => 'roi'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'click_assisted_conversions' => 'setClickAssistedConversions',
        'click_assisted_revenue' => 'setClickAssistedRevenue',
        'clicks' => 'setClicks',
        'conversion_rate_many_per_click' => 'setConversionRateManyPerClick',
        'conversion_rate_one_per_click' => 'setConversionRateOnePerClick',
        'conversions_many_per_click' => 'setConversionsManyPerClick',
        'conversions_one_per_click' => 'setConversionsOnePerClick',
        'cost' => 'setCost',
        'ctr' => 'setCtr',
        'date' => 'setDate',
        'hits' => 'setHits',
        'id' => 'setId',
        'margin_rate' => 'setMarginRate',
        'position' => 'setPosition',
        'revenue' => 'setRevenue',
        'roi' => 'setRoi'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'click_assisted_conversions' => 'getClickAssistedConversions',
        'click_assisted_revenue' => 'getClickAssistedRevenue',
        'clicks' => 'getClicks',
        'conversion_rate_many_per_click' => 'getConversionRateManyPerClick',
        'conversion_rate_one_per_click' => 'getConversionRateOnePerClick',
        'conversions_many_per_click' => 'getConversionsManyPerClick',
        'conversions_one_per_click' => 'getConversionsOnePerClick',
        'cost' => 'getCost',
        'ctr' => 'getCtr',
        'date' => 'getDate',
        'hits' => 'getHits',
        'id' => 'getId',
        'margin_rate' => 'getMarginRate',
        'position' => 'getPosition',
        'revenue' => 'getRevenue',
        'roi' => 'getRoi'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['click_assisted_conversions'] = isset($data['click_assisted_conversions']) ? $data['click_assisted_conversions'] : null;
        $this->container['click_assisted_revenue'] = isset($data['click_assisted_revenue']) ? $data['click_assisted_revenue'] : null;
        $this->container['clicks'] = isset($data['clicks']) ? $data['clicks'] : null;
        $this->container['conversion_rate_many_per_click'] = isset($data['conversion_rate_many_per_click']) ? $data['conversion_rate_many_per_click'] : null;
        $this->container['conversion_rate_one_per_click'] = isset($data['conversion_rate_one_per_click']) ? $data['conversion_rate_one_per_click'] : null;
        $this->container['conversions_many_per_click'] = isset($data['conversions_many_per_click']) ? $data['conversions_many_per_click'] : null;
        $this->container['conversions_one_per_click'] = isset($data['conversions_one_per_click']) ? $data['conversions_one_per_click'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['ctr'] = isset($data['ctr']) ? $data['ctr'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['hits'] = isset($data['hits']) ? $data['hits'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['margin_rate'] = isset($data['margin_rate']) ? $data['margin_rate'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['revenue'] = isset($data['revenue']) ? $data['revenue'] : null;
        $this->container['roi'] = isset($data['roi']) ? $data['roi'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets click_assisted_conversions
     * @return int
     */
    public function getClickAssistedConversions()
    {
        return $this->container['click_assisted_conversions'];
    }

    /**
     * Sets click_assisted_conversions
     * @param int $click_assisted_conversions Number of indirect converted clicks registered on the campaign.
     * @return $this
     */
    public function setClickAssistedConversions($click_assisted_conversions)
    {
        $this->container['click_assisted_conversions'] = $click_assisted_conversions;

        return $this;
    }

    /**
     * Gets click_assisted_revenue
     * @return int
     */
    public function getClickAssistedRevenue()
    {
        return $this->container['click_assisted_revenue'];
    }

    /**
     * Sets click_assisted_revenue
     * @param int $click_assisted_revenue Number of indirect conversions registered on the campaign
     * @return $this
     */
    public function setClickAssistedRevenue($click_assisted_revenue)
    {
        $this->container['click_assisted_revenue'] = $click_assisted_revenue;

        return $this;
    }

    /**
     * Gets clicks
     * @return int
     */
    public function getClicks()
    {
        return $this->container['clicks'];
    }

    /**
     * Sets clicks
     * @param int $clicks Number of clicks registered on the campaign
     * @return $this
     */
    public function setClicks($clicks)
    {
        $this->container['clicks'] = $clicks;

        return $this;
    }

    /**
     * Gets conversion_rate_many_per_click
     * @return double
     */
    public function getConversionRateManyPerClick()
    {
        return $this->container['conversion_rate_many_per_click'];
    }

    /**
     * Sets conversion_rate_many_per_click
     * @param double $conversion_rate_many_per_click Conversion rate of the campaign.
     * @return $this
     */
    public function setConversionRateManyPerClick($conversion_rate_many_per_click)
    {
        $this->container['conversion_rate_many_per_click'] = $conversion_rate_many_per_click;

        return $this;
    }

    /**
     * Gets conversion_rate_one_per_click
     * @return double
     */
    public function getConversionRateOnePerClick()
    {
        return $this->container['conversion_rate_one_per_click'];
    }

    /**
     * Sets conversion_rate_one_per_click
     * @param double $conversion_rate_one_per_click Conversion rate based on converted clicks. Deprecated for AdWords.
     * @return $this
     */
    public function setConversionRateOnePerClick($conversion_rate_one_per_click)
    {
        $this->container['conversion_rate_one_per_click'] = $conversion_rate_one_per_click;

        return $this;
    }

    /**
     * Gets conversions_many_per_click
     * @return int
     */
    public function getConversionsManyPerClick()
    {
        return $this->container['conversions_many_per_click'];
    }

    /**
     * Sets conversions_many_per_click
     * @param int $conversions_many_per_click Number of conversions registered on the campaign
     * @return $this
     */
    public function setConversionsManyPerClick($conversions_many_per_click)
    {
        $this->container['conversions_many_per_click'] = $conversions_many_per_click;

        return $this;
    }

    /**
     * Gets conversions_one_per_click
     * @return int
     */
    public function getConversionsOnePerClick()
    {
        return $this->container['conversions_one_per_click'];
    }

    /**
     * Sets conversions_one_per_click
     * @param int $conversions_one_per_click Number of converted clicks registered on the campaign. Deprecated for AdWords.
     * @return $this
     */
    public function setConversionsOnePerClick($conversions_one_per_click)
    {
        $this->container['conversions_one_per_click'] = $conversions_one_per_click;

        return $this;
    }

    /**
     * Gets cost
     * @return double
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     * @param double $cost Total cost of the campaign
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets ctr
     * @return double
     */
    public function getCtr()
    {
        return $this->container['ctr'];
    }

    /**
     * Sets ctr
     * @param double $ctr Click-Through-Rate of the Campaign.
     * @return $this
     */
    public function setCtr($ctr)
    {
        $this->container['ctr'] = $ctr;

        return $this;
    }

    /**
     * Gets date
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     * @param string $date Date of the statistic. Format is 'YYYY-MM-DD'
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets hits
     * @return int
     */
    public function getHits()
    {
        return $this->container['hits'];
    }

    /**
     * Sets hits
     * @param int $hits Total hits of the campaign
     * @return $this
     */
    public function setHits($hits)
    {
        $this->container['hits'] = $hits;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id ID of the campaign
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets margin_rate
     * @return double
     */
    public function getMarginRate()
    {
        return $this->container['margin_rate'];
    }

    /**
     * Sets margin_rate
     * @param double $margin_rate Margin rate for the campaign.
     * @return $this
     */
    public function setMarginRate($margin_rate)
    {
        $this->container['margin_rate'] = $margin_rate;

        return $this;
    }

    /**
     * Gets position
     * @return double
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     * @param double $position Average position of the ads
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets revenue
     * @return double
     */
    public function getRevenue()
    {
        return $this->container['revenue'];
    }

    /**
     * Sets revenue
     * @param double $revenue Total revenue of the campaign
     * @return $this
     */
    public function setRevenue($revenue)
    {
        $this->container['revenue'] = $revenue;

        return $this;
    }

    /**
     * Gets roi
     * @return double
     */
    public function getRoi()
    {
        return $this->container['roi'];
    }

    /**
     * Sets roi
     * @param double $roi Revenue over cost for the campaign.
     * @return $this
     */
    public function setRoi($roi)
    {
        $this->container['roi'] = $roi;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Dcm\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Dcm\ObjectSerializer::sanitizeForSerialization($this));
    }
}


