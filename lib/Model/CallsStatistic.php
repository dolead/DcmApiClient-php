<?php
/**
 * CallsStatistic
 *
 * PHP version 5
 *
 * @category Class
 * @package  Dcm
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Dolead Campaign Manager API v1.0
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Dcm\Model;

use \ArrayAccess;

/**
 * CallsStatistic Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Dcm
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CallsStatistic implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CallsStatistic';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'account_publisher_id' => 'string',
        'calls' => 'int',
        'calls_cost' => 'double',
        'calls_duration' => 'int',
        'campaign_publisher_id' => 'string',
        'date' => '\DateTime'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'account_publisher_id' => 'account_publisher_id',
        'calls' => 'calls',
        'calls_cost' => 'calls_cost',
        'calls_duration' => 'calls_duration',
        'campaign_publisher_id' => 'campaign_publisher_id',
        'date' => 'date'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'account_publisher_id' => 'setAccountPublisherId',
        'calls' => 'setCalls',
        'calls_cost' => 'setCallsCost',
        'calls_duration' => 'setCallsDuration',
        'campaign_publisher_id' => 'setCampaignPublisherId',
        'date' => 'setDate'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'account_publisher_id' => 'getAccountPublisherId',
        'calls' => 'getCalls',
        'calls_cost' => 'getCallsCost',
        'calls_duration' => 'getCallsDuration',
        'campaign_publisher_id' => 'getCampaignPublisherId',
        'date' => 'getDate'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_publisher_id'] = isset($data['account_publisher_id']) ? $data['account_publisher_id'] : null;
        $this->container['calls'] = isset($data['calls']) ? $data['calls'] : 0;
        $this->container['calls_cost'] = isset($data['calls_cost']) ? $data['calls_cost'] : 0.0;
        $this->container['calls_duration'] = isset($data['calls_duration']) ? $data['calls_duration'] : 0;
        $this->container['campaign_publisher_id'] = isset($data['campaign_publisher_id']) ? $data['campaign_publisher_id'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['account_publisher_id'] === null) {
            $invalid_properties[] = "'account_publisher_id' can't be null";
        }
        if (!is_null($this->container['calls']) && ($this->container['calls'] < 0.0)) {
            $invalid_properties[] = "invalid value for 'calls', must be bigger than or equal to 0.0.";
        }

        if (!is_null($this->container['calls_cost']) && ($this->container['calls_cost'] < 0.0)) {
            $invalid_properties[] = "invalid value for 'calls_cost', must be bigger than or equal to 0.0.";
        }

        if (!is_null($this->container['calls_duration']) && ($this->container['calls_duration'] < 0.0)) {
            $invalid_properties[] = "invalid value for 'calls_duration', must be bigger than or equal to 0.0.";
        }

        if ($this->container['date'] === null) {
            $invalid_properties[] = "'date' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['account_publisher_id'] === null) {
            return false;
        }
        if ($this->container['calls'] < 0.0) {
            return false;
        }
        if ($this->container['calls_cost'] < 0.0) {
            return false;
        }
        if ($this->container['calls_duration'] < 0.0) {
            return false;
        }
        if ($this->container['date'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets account_publisher_id
     * @return string
     */
    public function getAccountPublisherId()
    {
        return $this->container['account_publisher_id'];
    }

    /**
     * Sets account_publisher_id
     * @param string $account_publisher_id ID of the account in the publisher network system
     * @return $this
     */
    public function setAccountPublisherId($account_publisher_id)
    {
        $this->container['account_publisher_id'] = $account_publisher_id;

        return $this;
    }

    /**
     * Gets calls
     * @return int
     */
    public function getCalls()
    {
        return $this->container['calls'];
    }

    /**
     * Sets calls
     * @param int $calls Number of calls
     * @return $this
     */
    public function setCalls($calls)
    {

        if ($calls < 0.0) {
            throw new \InvalidArgumentException('invalid value for $calls when calling CallsStatistic., must be bigger than or equal to 0.0.');
        }
        $this->container['calls'] = $calls;

        return $this;
    }

    /**
     * Gets calls_cost
     * @return double
     */
    public function getCallsCost()
    {
        return $this->container['calls_cost'];
    }

    /**
     * Sets calls_cost
     * @param double $calls_cost Total external cost of calls. Does NOT include network cost.
     * @return $this
     */
    public function setCallsCost($calls_cost)
    {

        if ($calls_cost < 0.0) {
            throw new \InvalidArgumentException('invalid value for $calls_cost when calling CallsStatistic., must be bigger than or equal to 0.0.');
        }
        $this->container['calls_cost'] = $calls_cost;

        return $this;
    }

    /**
     * Gets calls_duration
     * @return int
     */
    public function getCallsDuration()
    {
        return $this->container['calls_duration'];
    }

    /**
     * Sets calls_duration
     * @param int $calls_duration Total duration of the calls, in seconds.
     * @return $this
     */
    public function setCallsDuration($calls_duration)
    {

        if ($calls_duration < 0.0) {
            throw new \InvalidArgumentException('invalid value for $calls_duration when calling CallsStatistic., must be bigger than or equal to 0.0.');
        }
        $this->container['calls_duration'] = $calls_duration;

        return $this;
    }

    /**
     * Gets campaign_publisher_id
     * @return string
     */
    public function getCampaignPublisherId()
    {
        return $this->container['campaign_publisher_id'];
    }

    /**
     * Sets campaign_publisher_id
     * @param string $campaign_publisher_id ID of the campaign in the publisher network system. If provided, stats will also be linked to this campaign.
     * @return $this
     */
    public function setCampaignPublisherId($campaign_publisher_id)
    {
        $this->container['campaign_publisher_id'] = $campaign_publisher_id;

        return $this;
    }

    /**
     * Gets date
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     * @param \DateTime $date Date of the statistic. Recommanded format is 'YYYY-MM-DD'
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Dcm\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Dcm\ObjectSerializer::sanitizeForSerialization($this));
    }
}


