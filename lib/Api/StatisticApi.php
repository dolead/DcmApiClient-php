<?php
/**
 * StatisticApi
 * PHP version 5
 *
 * @category Class
 * @package  Dcm
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Dolead Campaign Manager API v1.0
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Dcm\Api;

use \Dcm\Configuration;
use \Dcm\ApiClient;
use \Dcm\ApiException;
use \Dcm\ObjectSerializer;

/**
 * StatisticApi Class Doc Comment
 *
 * @category Class
 * @package  Dcm
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StatisticApi
{

    /**
     * API Client
     *
     * @var \Dcm\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Dcm\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Dcm\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://dcmapi.dolead.com/v1');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Dcm\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Dcm\ApiClient $apiClient set the API client
     *
     * @return StatisticApi
     */
    public function setApiClient(\Dcm\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation controllersStatisticsGetCampaignStatistics
     *
     * Get campaign stats for a given period.
     *
     * @param string $campaign_id ID of campaign (required)
     * @param \DateTime $period_start ID of campaign (required)
     * @param \DateTime $period_end ID of campaign (required)
     * @return \Dcm\Model\SingleCampaignStatistic
     * @throws \Dcm\ApiException on non-2xx response
     */
    public function controllersStatisticsGetCampaignStatistics($campaign_id, $period_start, $period_end)
    {
        list($response) = $this->controllersStatisticsGetCampaignStatisticsWithHttpInfo($campaign_id, $period_start, $period_end);
        return $response;
    }

    /**
     * Operation controllersStatisticsGetCampaignStatisticsWithHttpInfo
     *
     * Get campaign stats for a given period.
     *
     * @param string $campaign_id ID of campaign (required)
     * @param \DateTime $period_start ID of campaign (required)
     * @param \DateTime $period_end ID of campaign (required)
     * @return Array of \Dcm\Model\SingleCampaignStatistic, HTTP status code, HTTP response headers (array of strings)
     * @throws \Dcm\ApiException on non-2xx response
     */
    public function controllersStatisticsGetCampaignStatisticsWithHttpInfo($campaign_id, $period_start, $period_end)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $campaign_id when calling controllersStatisticsGetCampaignStatistics');
        }
        // verify the required parameter 'period_start' is set
        if ($period_start === null) {
            throw new \InvalidArgumentException('Missing the required parameter $period_start when calling controllersStatisticsGetCampaignStatistics');
        }
        // verify the required parameter 'period_end' is set
        if ($period_end === null) {
            throw new \InvalidArgumentException('Missing the required parameter $period_end when calling controllersStatisticsGetCampaignStatistics');
        }
        // parse inputs
        $resourcePath = "/campaign/statistics/{campaign_id}/{period_start}/{period_end}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                "{" . "campaign_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($campaign_id),
                $resourcePath
            );
        }
        // path params
        if ($period_start !== null) {
            $resourcePath = str_replace(
                "{" . "period_start" . "}",
                $this->apiClient->getSerializer()->toPathValue($period_start),
                $resourcePath
            );
        }
        // path params
        if ($period_end !== null) {
            $resourcePath = str_replace(
                "{" . "period_end" . "}",
                $this->apiClient->getSerializer()->toPathValue($period_end),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('DCM-API-KEY');
        if (strlen($apiKey) !== 0) {
            $headerParams['DCM-API-KEY'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Dcm\Model\SingleCampaignStatistic',
                '/campaign/statistics/{campaign_id}/{period_start}/{period_end}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Dcm\Model\SingleCampaignStatistic', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Dcm\Model\SingleCampaignStatistic', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
